"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.spglslParseVersion = exports.spglslLanguageFromString = exports.SpglslLanguage = exports.SpglslCompileMode = void 0;
const string_enums_1 = require("./core/string-enums");
const path_1 = require("path");
exports.SpglslCompileMode = (0, string_enums_1.StringEnum)("Validate", "Compile", "Optimize");
exports.SpglslLanguage = (0, string_enums_1.StringEnum)("Vertex", "TessControl", "TessEvaluation", "Geometry", "Fragment", "Compute", "RayGen", "Intersect", "AnyHit", "ClosestHit", "Miss", "Callable");
function spglslLanguageFromString(s) {
    if (!s) {
        return "";
    }
    if (string_enums_1.StringEnum.has(exports.SpglslLanguage, s)) {
        return s;
    }
    let basename = null;
    if (s.indexOf("/") >= 0 || s.indexOf("\\") >= 0) {
        s = (0, path_1.extname)(s) || s;
        if (s && s.startsWith(".")) {
            basename = (0, path_1.basename)(s, s);
            s = s.slice(1);
        }
        s = (s && s.toLowerCase()) || "";
    }
    if (s.startsWith("gl_")) {
        s = s.slice(3);
    }
    if (s.startsWith("frag") || s.startsWith("fs")) {
        return "Fragment";
    }
    if (s.startsWith("vert") || s.startsWith("vs")) {
        return "Vertex";
    }
    if (s.startsWith("geom") || s.startsWith("gs")) {
        return "Geometry";
    }
    if (s.startsWith("comp") || s.startsWith("cs")) {
        return "Compute";
    }
    if (s.startsWith("tesc") || s.startsWith("tsc")) {
        return "TessControl";
    }
    if (s.startsWith("tes") || s.startsWith("tse")) {
        return "TessEvaluation";
    }
    if (basename) {
        const indexOfSep = Math.max(basename.lastIndexOf("."), basename.lastIndexOf("-"), basename.lastIndexOf("_"));
        if (indexOfSep > 0) {
            return spglslLanguageFromString(basename.slice(indexOfSep + 1));
        }
    }
    return "";
}
exports.spglslLanguageFromString = spglslLanguageFromString;
function spglslParseVersion(version, language = "Fragment") {
    switch (version) {
        case "Fragment":
        case "Vertex":
        case "GLES2":
        case "WEBGL":
        case "GLES3":
        case "WEBGL2":
            return 300;
        case "GLES3_1":
        case "WEBGL3":
            return 310;
        default:
            return typeof version === "number" ? version | 0 : language === "Fragment" || language === "Vertex" ? 300 : 310;
    }
}
exports.spglslParseVersion = spglslParseVersion;
//# sourceMappingURL=spglsl-enums.js.map
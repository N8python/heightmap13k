import type { StringEnumValue } from "./core/string-enums";
import type { StringEnum } from "./core/string-enums";
export declare const GlslLogRowType: StringEnum<"WARNING" | "ERROR" | "UNKNOWN ERROR">;
export type GlslLogRowType = StringEnumValue<typeof GlslLogRowType>;
export interface GlslInfoLogFormatOptions {
    colors?: boolean | undefined;
}
export declare class GlslInfoLogRow implements GlslInfoLogRow {
    type: GlslLogRowType;
    filePath: string;
    line: number;
    source: string;
    message: string;
    cwd?: string;
    constructor(type?: GlslLogRowType, filePath?: string, line?: number, source?: string, message?: string, cwd?: string);
    static parse(infolog: string | GlslInfoLogRow | Error | null | undefined, defaultFilePath?: string, filePathLookup?: Readonly<Record<string | number, string>>, cwd?: string): GlslInfoLogRow;
    original(): string;
    toString(options?: GlslInfoLogFormatOptions): string;
}
export declare class GlslInfoLogArray extends Array<GlslInfoLogRow> {
    clone(): this;
    clear(): void;
    static parse(infolog: string | null | undefined, defaultFilePath?: string, filePathLookup?: Readonly<Record<string | number, string>>, cwd?: string): GlslInfoLogArray;
    parseAdd(infolog: GlslInfoLogArray | string | null | undefined, defaultFilePath?: string, filePathLookup?: Readonly<Record<string | number, string>>, cwd?: string): GlslInfoLogArray;
    getFirstErrorMessage(): string;
    hasErrors(): boolean;
    hasWarnings(): boolean;
    getCounts(): {
        errors: number;
        warnings: number;
    };
    original(): string;
    inspect(): string;
    toString(options?: GlslInfoLogFormatOptions): string;
    removeDuplicates(): this;
}

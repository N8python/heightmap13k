"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) {k2 = k;}
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) {k2 = k;}
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o.default = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) {return mod;}
    var result = {};
    if (mod != null) {for (var k in mod) {if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) {__createBinding(result, mod, k);}}}
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._wasmSpglslGet = exports.spglslUnload = exports.spglslPreload = void 0;
let _wasmSpglsl = null;
let _wasmSpglslPromise = null;
async function spglslPreload() {
    if (!_wasmSpglsl && !_wasmSpglslPromise) {
        await _wasmSpglslGet();
    }
}
exports.spglslPreload = spglslPreload;
function spglslUnload() {
    if (_wasmSpglsl) {
        _wasmSpglsl = null;
        _wasmSpglslPromise = null;
        return true;
    }
    return false;
}
exports.spglslUnload = spglslUnload;
async function _wasmSpglslGet() {
    return {
        spglsl: (_wasmSpglsl || (await (_wasmSpglslPromise || (_wasmSpglslPromise = _spglslInit())))),
    };
}
exports._wasmSpglslGet = _wasmSpglslGet;
async function _spglslInit() {
    var _a;
    let result;
    try {
        const dynamicImport = "../../wasm/spglsl.js";
        const imported = await (_a = dynamicImport, Promise.resolve().then(() => __importStar(require(_a))));
        result = await (imported.default || imported)();
        if (!result.spglsl_init({})) {
            throw new Error("spglsl initialization failed");
        }
        _wasmSpglsl = result;
        return result;
    }
    catch (cause) {
        _wasmSpglslPromise = null;
        const error = cause instanceof Error ? cause : new Error(`${cause}`);
        throw error;
    }
}
//# sourceMappingURL=_wasm.js.map
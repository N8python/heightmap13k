"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringEnum = void 0;
const util_1 = require("util");
const _symIndices = Symbol("indices");
const { defineProperty } = Object;
// eslint-disable-next-line @typescript-eslint/no-redeclare
function StringEnum(...values) {
    const array = Array.from(new Set(values));
    const base = {};
    defineProperty(base, Symbol.iterator, { value: () => array[Symbol.iterator]() });
    defineProperty(base, util_1.inspect.custom, { value: () => array });
    const indices = new Map();
    defineProperty(base, _symIndices, { value: indices });
    const result = Object.create(base);
    for (let i = 0, len = values.length; i < len; ++i) {
        const value = values[i];
        defineProperty(result, value, { value, configurable: false, enumerable: true, writable: false });
        indices.set(value, i);
    }
    return result;
}
exports.StringEnum = StringEnum;
StringEnum.iterate = (stringEnum) => stringEnum[Symbol.iterator]();
StringEnum.keys = Object.keys;
StringEnum.has = (stringEnum, value) => typeof value === "string" && value in stringEnum;
StringEnum.indexOf = (stringEnum, value) => {
    const found = (stringEnum[_symIndices] || _loadStringEnumIndices(stringEnum)).get(value);
    return found !== undefined ? found : -1;
};
StringEnum.compare = (stringEnum, a, b) => {
    const ia = StringEnum.indexOf(stringEnum, a);
    const ib = StringEnum.indexOf(stringEnum, b);
    if (ia < 0) {
        if (ib < 0) {
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        }
        return 1;
    }
    if (ib < 0) {
        return -1;
    }
    if (ia < ib) {
        return -1;
    }
    if (ia > ib) {
        return 1;
    }
    return 0;
};
StringEnum.max = (stringEnum, a, b) => {
    return StringEnum.compare(stringEnum, a, b) > 0 ? a : b;
};
function _loadStringEnumIndices(stringEnum) {
    const values = Object.values(stringEnum);
    const indices = new Map();
    for (let i = 0, len = values.length; i < len; ++i) {
        const v = values[i];
        if (typeof v === "string") {
            indices.set(v, i);
        }
    }
    defineProperty(stringEnum, _symIndices, { value: indices });
    return indices;
}
//# sourceMappingURL=string-enums.js.map
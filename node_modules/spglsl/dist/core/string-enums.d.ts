export type StringEnum<T extends string> = {
    readonly [P in T]: P;
};
export type StringEnumValue<T extends string | StringEnum<any>> = T extends string ? T : keyof T;
export declare function StringEnum<TArray extends readonly string[]>(...values: TArray): StringEnum<TArray[number]>;
export declare namespace StringEnum {
    var iterate: <T extends string>(stringEnum: StringEnum<T>) => Iterator<T, any, undefined>;
    var keys: <T extends string>(stringEnum: StringEnum<T>) => StringEnumValue<T>[];
    var has: <T extends string>(stringEnum: StringEnum<T>, value: string | null | undefined) => value is T;
    var indexOf: <T extends string>(stringEnum: StringEnum<T>, value: string | false | null | undefined) => number;
    var compare: <T extends string>(stringEnum: StringEnum<T>, a: string | false | null | undefined, b: string | false | null | undefined) => number;
    var max: <T extends string>(stringEnum: StringEnum<T>, a: string, b: string) => string;
}

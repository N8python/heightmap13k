import type { SpglslAngleCompileOptions, SpglslAngleCompileResult } from "./spglsl-compile";
export interface RollupPluginSpglslOptions extends SpglslAngleCompileOptions {
    isServer?: boolean;
    isProduction?: boolean;
    extensions?: string[];
    throwOnError?: boolean;
    logging?: boolean;
    cwd?: string;
    onSpglslDone?: (spglslResult: SpglslAngleCompileResult) => void | string | Promise<void> | Promise<string>;
}
export interface RollupPluginSpglslResult extends SpglslAngleCompileResult {
    isServer: boolean;
    isProduction: boolean;
    throwOnError: boolean;
}
/**
 * A plugin for rollup and vite
 */
export declare function rollupPluginSpglsl(options: RollupPluginSpglslOptions): {
    name: string;
    configResolved: ({ isProduction, command }: {
        isProduction?: boolean | undefined;
        command?: string | undefined;
    }) => void;
    transform: (code: string, id: string) => Promise<{
        code: string;
        map: null;
    } | undefined>;
};
export declare namespace rollupPluginSpglsl {
    var defaultExtensions: string[];
}
